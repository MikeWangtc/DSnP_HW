/****************************************************************************
  FileName     [ cirMgr.h ]
  PackageName  [ cir ]
  Synopsis     [ Define circuit manager ]
  Author       [ Chung-Yang (Ric) Huang ]
  Copyright    [ Copyleft(c) 2008-present LaDs(III), GIEE, NTU, Taiwan ]
****************************************************************************/

#ifndef CIR_MGR_H
#define CIR_MGR_H

#include <vector>
#include <string>
#include <fstream>
#include <iostream>
#include <unordered_map>
#include "sat.h"

using namespace std;

// TODO: Feel free to define your own classes, variables, or functions.

#include "cirDef.h"

extern CirMgr *cirMgr;

class CirMgr
{
	friend bool myCompare4fec(const unsigned&, const unsigned&);
public:
	CirMgr():_switch(false),_numSim(0), _totalGate(0) {}
	~CirMgr();

	// Access functions
	// return '0' if "gid" corresponds to an undefined gate.
	CirGate* getGate(unsigned gid) const {
	   if(gid >= _GateList.size()) return 0;
	   return _GateList[gid];
   }

	// Member functions about circuit construction
	bool readCircuit(const string&);

	// Member functions about circuit optimization
	void sweep();

	void optimize();

	// Member functions about simulation
	void randomSim();
	void fileSim(ifstream&);
	void setSimLog(ofstream *logFile) { _simLog = logFile; }

	// Member functions about fraig
	void strash();
	void printFEC() const;
	void fraig();

   	// Member functions about circuit reporting
	void printSummary() const;
	void printNetlist() const;
	void printPIs() const;
	void printPOs() const;
	void printFloatGates() const;
	void printFECPairs() const;
	void writeAag(ostream&) const;
	void writeGate(ostream&, CirGate*) const;

private:
	// Auxiliary function for building fanIn, fanOut;
	void buildConnet();
	// Auxiliary function for sweep()
	void sweep(CirGate*);
	// Auxiliary function for optimization()
	void optimize(CirGate*, vector<bool>&);
	void update_gate(CirGate*);
	// Auxiliary function for optimization()
	void strash(CirGate*);
	void mergeGates(CirGate*, CirGate*, bool);
	// Function to build list
	void build_DFS() const;
	void clear_DFS() const;
	void build_Fl()  const;
	void build_NU()  const;
	void setRef()    const;
	// Auxiliary function for simluation()
	void doSimulation(const vector<size_t>&);
	void initFecGrps();
	void writeSimulation(const vector<size_t>&, size_t);
	// Auxiliary function for fraig()
	void initSolver();
	void buildFanInCNF(const unsigned&);
	void proveFEC(const unsigned&, const unsigned&, int&, bool);
	void fraig(CirGate*, int&);
	
	bool							_switch;
	int 							_numSim;
	SatSolver 						_solver;
   	ofstream           				*_simLog;
	vector<CirGate*> 				_GateList;
	vector<unsigned> 				_PiList;
	vector<unsigned> 				_PoList;
	mutable vector<unsigned> 		_FlList;
	mutable vector<unsigned> 		_NUList;				//Record any Not-used AIG and PI whith _NUList
	mutable vector<unsigned> 		_DFSList;
	mutable	unordered_map<unsigned, unsigned>	_DFSmap;
	unordered_map<string, CirGate*> _hash;					//For strash()
	vector<vector<unsigned> >		_fecGrps;				//For simulation(). Store Literal(contain invert info), not ID
	vector<vector<size_t> >			_CEXipPattern;			//Counter Example patterns of PIs generated by SAT solver
	mutable unsigned				_miloa[5], _effAIGNum, _totalGate;
	string 			    			_header;
};

#endif // CIR_MGR_H
